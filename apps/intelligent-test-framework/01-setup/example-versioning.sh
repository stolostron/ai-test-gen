#!/bin/bash

# example-versioning.sh - Versioned Example Directory Management
# Ensures multiple runs of the same JIRA ticket create separate versioned directories

set -e

# Color codes for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
NC='\033[0m' # No Color

print_status() {
    echo -e "${BLUE}[VERSIONING]${NC} $1" >&2
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1" >&2
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1" >&2
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1" >&2
}

# Determine the next version number for a JIRA ticket
get_next_version() {
    local jira_ticket="$1"
    local examples_dir="examples"
    
    if [ ! -d "$examples_dir" ]; then
        mkdir -p "$examples_dir"
        echo "1"
        return 0
    fi
    
    # Find existing versions
    local max_version=0
    
    # Check base directory (original)
    if [ -d "$examples_dir/$jira_ticket" ]; then
        max_version=1
    fi
    
    # Check versioned directories
    for dir in "$examples_dir"/"$jira_ticket"-*; do
        if [ -d "$dir" ] && [ "$dir" != "$examples_dir/$jira_ticket-*" ]; then
            local version=$(basename "$dir" | sed "s/$jira_ticket-//")
            # Validate it's a number
            if [[ "$version" =~ ^[0-9]+$ ]] && [ "$version" -gt "$max_version" ]; then
                max_version="$version"
            fi
        fi
    done
    
    echo $((max_version + 1))
}

# Create versioned example directory
create_versioned_example_dir() {
    local jira_ticket="$1"
    local examples_dir="examples"
    
    local next_version=$(get_next_version "$jira_ticket")
    local example_dir
    
    if [ "$next_version" -eq 1 ]; then
        # First run - use base directory name
        example_dir="$examples_dir/$jira_ticket"
    else
        # Subsequent runs - use versioned directory name
        example_dir="$examples_dir/$jira_ticket-$next_version"
    fi
    
    # Only create if it doesn't exist
    if [ ! -d "$example_dir" ]; then
        
        # Create the directory structure
        mkdir -p "$example_dir"/{01-setup,02-analysis/{prompts,sessions},02-test-planning,03-implementation,04-quality,05-documentation,06-reference}
        
        # Create initial tracking file
        cat > "$example_dir/run-metadata.json" << EOF
{
  "jira_ticket": "$jira_ticket",
  "version": $next_version,
  "created_at": "$(date -Iseconds)",
  "framework_version": "2.0",
  "status": "in_progress",
  "example_dir": "$example_dir"
}
EOF
        
        # Create README for this example
        cat > "$example_dir/README.md" << EOF
# $jira_ticket Example - Version $next_version

This directory contains a complete example workflow for JIRA ticket **$jira_ticket**.

## Run Information

- **Version**: $next_version
- **Created**: $(date)
- **Framework Version**: 2.0

## Directory Structure

\`\`\`
$jira_ticket$([ "$next_version" -gt 1 ] && echo "-$next_version")/
├── 01-setup/                  # Environment and validation scripts
├── 02-analysis/               # AI analysis and prompts
│   ├── prompts/              # AI prompt templates
│   └── sessions/             # Analysis session logs
├── 02-test-planning/         # Generated test plans
├── 03-implementation/        # Framework-specific test implementations
├── 04-quality/              # Quality validation reports
├── 05-documentation/        # Generated documentation
├── 06-reference/            # Reference materials and research
├── run-metadata.json       # Run tracking information
└── README.md               # This file
\`\`\`

## Generated Artifacts

This example contains the complete workflow output including:

- Comprehensive test plans in table format
- Framework-specific test implementations
- Validation reports and quality metrics
- Research materials and documentation
- Session logs and analysis details

## Usage

To reference this example in future runs:

\`\`\`bash
# Copy configuration from this example
cp $example_dir/team-config.yaml ./

# Reference specific artifacts
cat $example_dir/02-test-planning/test-plan.md

# Review implementation patterns
ls $example_dir/03-implementation/
\`\`\`

---

**Generated by**: AI Test Generation Framework v2.0  
**Framework Repository**: [stolostron/ai-test-gen](https://github.com/stolostron/ai-test-gen)
EOF
    fi
    
    # Output only the directory path on stdout to avoid consumers mis-parsing colored logs
    echo "$example_dir"
}

# List previous versions for a JIRA ticket
list_previous_versions() {
    local jira_ticket="$1"
    local examples_dir="examples"
    local versions=()
    
    # Check base directory
    if [ -d "$examples_dir/$jira_ticket" ]; then
        versions+=("1")
    fi
    
    # Check versioned directories
    for dir in "$examples_dir"/"$jira_ticket"-*; do
        if [ -d "$dir" ] && [ "$dir" != "$examples_dir/$jira_ticket-*" ]; then
            local version=$(basename "$dir" | sed "s/$jira_ticket-//")
            if [[ "$version" =~ ^[0-9]+$ ]]; then
                versions+=("$version")
            fi
        fi
    done
    
    # Sort versions numerically and output as JSON
    if [ ${#versions[@]} -gt 0 ]; then
        printf '%s\n' "${versions[@]}" | sort -n | jq -R . | jq -s .
    else
        echo "[]"
    fi
}

# Get directory creation date
get_dir_creation_date() {
    local dir="$1"
    if [ -f "$dir/run-metadata.json" ]; then
        jq -r '.created_at' "$dir/run-metadata.json" 2>/dev/null || stat -f "%SB" -t "%Y-%m-%d %H:%M" "$dir" 2>/dev/null || echo "Unknown"
    else
        stat -f "%SB" -t "%Y-%m-%d %H:%M" "$dir" 2>/dev/null || echo "Unknown"
    fi
}

# List previous versions in markdown format
list_previous_versions_markdown() {
    local jira_ticket="$1"
    local examples_dir="examples"
    local found_versions=false
    
    # Check base directory
    if [ -d "$examples_dir/$jira_ticket" ]; then
        echo "- **Version 1**: \`examples/$jira_ticket/\` ($(get_dir_creation_date "$examples_dir/$jira_ticket"))"
        found_versions=true
    fi
    
    # Check versioned directories
    for dir in "$examples_dir"/"$jira_ticket"-*; do
        if [ -d "$dir" ] && [ "$dir" != "$examples_dir/$jira_ticket-*" ]; then
            local version=$(basename "$dir" | sed "s/$jira_ticket-//")
            if [[ "$version" =~ ^[0-9]+$ ]]; then
                echo "- **Version $version**: \`$dir/\` ($(get_dir_creation_date "$dir"))"
                found_versions=true
            fi
        fi
    done
    
    if [ "$found_versions" = false ]; then
        echo "- No previous versions found"
    fi
}

# Archive artifacts from working directory to example directory
archive_working_artifacts() {
    local jira_ticket="$1"
    local target_example_dir="$2"
    
    print_status "Checking for artifacts to archive from working directory..."
    
    # Common artifact patterns to archive
    local artifacts_to_archive=()
    
    # Check for artifacts that might exist in working directory
    local artifact_patterns=(
        "02-analysis/feature-analysis.md"
        "02-test-planning/test-plan.md"
        "workflow-state.json"
        "WORKFLOW_SUMMARY_*.md"
        "adaptive-feedback-report.md"
        "test-plan-refinements.json"
    )
    
    for pattern in "${artifact_patterns[@]}"; do
        if compgen -G "$pattern" > /dev/null; then
            for file in $pattern; do
                if [ -e "$file" ]; then
                    artifacts_to_archive+=("$file")
                fi
            done
        fi
    done
    
    if [ ${#artifacts_to_archive[@]} -gt 0 ]; then
        print_status "Found ${#artifacts_to_archive[@]} artifacts to archive"
        
        # Copy artifacts to example directory
        for artifact in "${artifacts_to_archive[@]}"; do
            local target_path="$target_example_dir/$artifact"
            mkdir -p "$(dirname "$target_path")"
            
            if [ -d "$artifact" ]; then
                cp -r "$artifact" "$target_path"
            else
                cp "$artifact" "$target_path"
            fi
            
            print_status "Archived: $artifact → $target_path"
        done
        
        # Update metadata with archived artifacts
        if [ -f "$target_example_dir/run-metadata.json" ]; then
            local archived_list=$(printf '%s\n' "${artifacts_to_archive[@]}" | jq -R . | jq -s .)
            jq ".archived_artifacts = $archived_list | .archived_at = \"$(date -Iseconds)\"" \
               "$target_example_dir/run-metadata.json" > "$target_example_dir/run-metadata.json.tmp" && \
               mv "$target_example_dir/run-metadata.json.tmp" "$target_example_dir/run-metadata.json"
        fi
        
        print_success "Archived ${#artifacts_to_archive[@]} artifacts successfully"
    else
        print_status "No artifacts found in working directory to archive"
    fi
}

# Clean up incomplete runs older than 1 hour
cleanup_incomplete_runs() {
    local jira_ticket="$1"
    local examples_dir="examples"
    
    print_status "Checking for incomplete runs to clean up..."
    
    for dir in "$examples_dir"/"$jira_ticket"*; do
        if [ -d "$dir" ] && [ -f "$dir/run-metadata.json" ]; then
            local status=$(jq -r '.status // "incomplete"' "$dir/run-metadata.json" 2>/dev/null)
            # Only clean up explicitly failed runs or very old incomplete runs
            if [ "$status" = "failed" ] || ([ "$status" = "incomplete" ] && [ "$status" != "in_progress" ]); then
                local created_at=$(jq -r '.created_at' "$dir/run-metadata.json" 2>/dev/null)
                
                # Check if it's older than 24 hours (prevent cleanup of recent runs)
                local created_timestamp=$(date -d "$created_at" +%s 2>/dev/null || date -j -f "%Y-%m-%dT%H:%M:%S%z" "$created_at" +%s 2>/dev/null || echo "0")
                local current_timestamp=$(date +%s)
                local age_hours=$(( (current_timestamp - created_timestamp) / 3600 ))
                
                if [ "$age_hours" -gt 24 ]; then
                    print_warning "Cleaning up incomplete run older than 24 hours: $dir"
                    rm -rf "$dir"
                    print_success "Cleaned up: $dir"
                fi
            fi
        fi
    done
}

# Mark run as completed
mark_run_completed() {
    local example_dir="$1"
    
    if [ -f "$example_dir/run-metadata.json" ]; then
        jq '.status = "completed" | .completed_at = "'"$(date -Iseconds)"'"' \
           "$example_dir/run-metadata.json" > "$example_dir/run-metadata.json.tmp" && \
           mv "$example_dir/run-metadata.json.tmp" "$example_dir/run-metadata.json"
        
        print_success "Run marked as completed: $example_dir"
    else
        print_warning "No metadata file found for: $example_dir"
    fi
}

# Set up versioned working environment
setup_versioned_environment() {
    local jira_ticket="$1"
    
    print_status "Setting up versioned environment for $jira_ticket"
    
    # Clean up any old incomplete runs first
    cleanup_incomplete_runs "$jira_ticket"
    
    # No need to archive to current directory during setup
    # archiving will happen when the example directory is created
    
    # Create versioned example directory
    print_status "Creating versioned example directory..."
    local example_dir=$(create_versioned_example_dir "$jira_ticket")
    
    if [ -f "$example_dir/run-metadata.json" ]; then
        local version=$(jq -r '.version' "$example_dir/run-metadata.json" 2>/dev/null || echo "unknown")
        print_success "Versioned environment ready: $example_dir"
        print_status "Version: $version"
        
        # Show previous versions if they exist
        local prev_versions=$(list_previous_versions "$jira_ticket")
        local prev_count=$(echo "$prev_versions" | jq length)
        
        if [ "$prev_count" -gt 1 ]; then
            print_status "Previous versions available:"
            # Redirect list output to stderr to keep stdout clean for the caller
            list_previous_versions_markdown "$jira_ticket" | sed 's/^/  /' >&2
        fi
    else
        print_error "Failed to create versioned environment"
        return 1
    fi
    
    echo "$example_dir"
}

# Main function for command line usage
main() {
    local command="$1"
    local jira_ticket="$2"
    
    case "$command" in
        "setup")
            if [ -z "$jira_ticket" ]; then
                print_error "Usage: $0 setup JIRA-TICKET"
                exit 1
            fi
            setup_versioned_environment "$jira_ticket"
            ;;
        "complete")
            if [ -z "$jira_ticket" ]; then
                print_error "Usage: $0 complete EXAMPLE-DIR"
                exit 1
            fi
            mark_run_completed "$jira_ticket"
            ;;
        "list")
            if [ -z "$jira_ticket" ]; then
                print_error "Usage: $0 list JIRA-TICKET"
                exit 1
            fi
            echo "Previous versions for $jira_ticket:"
            list_previous_versions_markdown "$jira_ticket"
            ;;
        *)
            echo "Usage: $0 {setup|complete|list} JIRA-TICKET"
            echo ""
            echo "Commands:"
            echo "  setup JIRA-TICKET    - Set up versioned environment for new run"
            echo "  complete EXAMPLE-DIR - Mark run as completed"
            echo "  list JIRA-TICKET     - List previous versions"
            exit 1
            ;;
    esac
}

# Execute main function if script is run directly
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    main "$@"
fi