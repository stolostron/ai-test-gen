# Agent C - GitHub Investigation AI Enhancement  
# Phase 2 AI Configuration for intelligent code investigation and PR analysis

agent_metadata:
  agent_id: "agent_c_github_investigation"
  agent_name: "Agent C - GitHub Investigation"
  agent_type: "github_investigation"
  phase: "Phase 2 - Parallel Deep Investigation"
  version: "2.0.0-ai-enhanced"
  ai_enhancement_level: "strategic"

context_inheritance:
  # Progressive Context Architecture integration
  foundation_context_required: true
  context_inheritance_level: "full"
  required_context_fields:
    - "jira_id"
    - "target_version"
    - "component"
    - "environment_platform"
    - "deployment_instruction"
    - "agent_a_findings"
  context_validation_required: true
  context_enrichment_enabled: true
  dependency_agents: ["agent_a_jira_intelligence"]
  coordination_agents: ["agent_b_documentation_intelligence"]

ai_capabilities:
  # AI-powered code investigation
  intelligent_search:
    - "semantic_code_search"
    - "pattern_recognition"
    - "change_impact_analysis"
    - "dependency_graph_analysis"
    - "test_coverage_assessment"
  
  code_analysis:
    - "implementation_pattern_detection"
    - "api_change_identification"
    - "breaking_change_analysis"
    - "backward_compatibility_check"
    - "security_implication_review"
  
  pr_intelligence:
    - "commit_history_analysis"
    - "change_context_extraction"
    - "test_modification_tracking"
    - "reviewer_expertise_mapping"
    - "merge_impact_assessment"

traditional_foundation:
  # Integration with traditional GitHub services
  base_service: "GitHubInvestigationService"
  github_clients:
    - "github_api_client"
    - "github_search_client"
    - "pr_analysis_client"
  mcp_integration: "mcp_github_service"
  validation_service: "CodeInvestigationValidator"

ai_enhancement_config:
  # AI enhancement configuration (30% weight)
  enhancement_weight: 0.3
  traditional_weight: 0.7
  enhancement_triggers:
    - "complex_implementation_changes"
    - "multi_repository_impact"
    - "api_breaking_changes"
    - "large_codebase_investigation"
    - "subtle_behavior_changes"
  
  ai_models:
    code_analyzer:
      model_type: "code_llm"
      context_window: 32768
      temperature: 0.05
      max_tokens: 8192
      system_prompt: |
        You are a GitHub code investigation specialist. Analyze code changes and 
        implementations for test generation with focus on:
        1. Implementation pattern identification
        2. API change impact assessment
        3. Test scenario requirement extraction
        4. Breaking change detection
        5. Integration point analysis
        6. Edge case identification from code behavior
    
    pr_analyzer:
      model_type: "llm"
      context_window: 16384
      temperature: 0.1
      max_tokens: 4096
      system_prompt: |
        Analyze GitHub Pull Requests for testing implications:
        1. Change scope and impact assessment
        2. Test modification requirements
        3. Integration testing needs
        4. Regression risk evaluation
        5. Deployment consideration extraction

execution_workflow:
  # Agent execution phases
  phase_1_foundation:
    - "inherit_progressive_context"
    - "analyze_agent_a_findings"
    - "identify_investigation_targets"
    - "prepare_github_search_strategy"
  
  phase_2_discovery:
    - "search_relevant_repositories"
    - "identify_related_prs"
    - "map_component_codebases"
    - "discover_test_frameworks"
  
  phase_3_investigation:
    - "analyze_implementation_changes"
    - "examine_pr_discussions"
    - "assess_test_coverage"
    - "identify_integration_points"
  
  phase_4_ai_analysis:
    - "apply_semantic_code_analysis"
    - "detect_implementation_patterns"
    - "assess_breaking_changes"
    - "identify_test_scenarios"
  
  phase_5_synthesis:
    - "synthesize_investigation_findings"
    - "generate_testing_recommendations"
    - "prepare_inheritance_context"
    - "create_investigation_report"

github_search_strategy:
  # Intelligent GitHub search configuration
  repository_targets:
    primary:
      - "stolostron/*"
      - "open-cluster-management-io/*"
      - "red-hat-storage/*"
    secondary:
      - "openshift/*"
      - "kubernetes/*"
      - "operator-framework/*"
  
  search_patterns:
    code_searches:
      - "filename:{component} language:go"
      - "path:*{component}* language:yaml"
      - "{jira_id} in:comments"
      - "{component} {version} in:commits"
    
    pr_searches:
      - "is:pr {component} {version}"
      - "is:pr {jira_id}"
      - "is:pr label:{component}"
      - "is:merged {component} base:release-{version}"
  
  ai_enhanced_queries:
    semantic_code_search: true
    context_aware_filtering: true
    relevance_scoring: true
    dependency_tracking: true

investigation_scope:
  # Code investigation parameters
  analysis_depth:
    surface_level:
      - "api_changes"
      - "configuration_updates"
      - "documentation_changes"
    
    detailed_level:
      - "implementation_logic"
      - "error_handling"
      - "integration_patterns"
      - "test_modifications"
    
    deep_level:
      - "architectural_changes"
      - "performance_implications"
      - "security_considerations"
      - "backward_compatibility"
  
  file_type_priorities:
    high_priority:
      - "*.go"
      - "*.yaml"
      - "*.yml"
      - "*_test.go"
    
    medium_priority:
      - "*.md"
      - "Dockerfile"
      - "Makefile"
      - "*.json"
    
    context_files:
      - "README.md"
      - "CHANGELOG.md"
      - "docs/*"

output_specification:
  # Expected outputs for agent inheritance
  investigation_report:
    format: "structured_json"
    sections:
      - "repository_analysis"
      - "pr_investigation"
      - "code_change_analysis"
      - "test_framework_assessment"
      - "integration_points"
      - "testing_recommendations"
  
  context_updates:
    - "agent_c_findings"
    - "implementation_details"
    - "test_framework_info"
    - "integration_requirements"
    - "code_investigation_results"
  
  inheritance_data:
    # Data provided to subsequent agents
    for_agent_d:
      - "deployment_artifacts"
      - "configuration_requirements"
      - "environment_dependencies"
      - "testing_framework_needs"
    for_qe_synthesis:
      - "implementation_test_scenarios"
      - "api_testing_requirements"
      - "integration_test_cases"
      - "regression_test_targets"
      - "edge_case_scenarios"

quality_assurance:
  # AI output validation
  validation_checks:
    - "code_analysis_accuracy"
    - "pr_relevance_verification"
    - "implementation_completeness"
    - "test_scenario_validity"
    - "integration_point_accuracy"
  
  confidence_scoring:
    repository_relevance: "0.0-1.0"
    code_change_impact: "0.0-1.0"
    test_scenario_completeness: "0.0-1.0"
    integration_accuracy: "0.0-1.0"
  
  quality_thresholds:
    minimum_relevance: 0.65
    high_confidence: 0.85
    expert_review_required: 0.5

integration_points:
  # Framework integration
  progressive_context:
    inheritance_source: "agent_a_jira_intelligence"
    coordination_with: "agent_b_documentation_intelligence"
    update_method: "context_inheritance_chain.update_agent_context"
    validation_method: "validate_github_investigation"
  
  mcp_integration:
    github_mcp_service: "mcp_github_investigation"
    performance_enhancement: "45-60%"
    caching_strategy: "intelligent_api_caching"
  
  evidence_validation:
    evidence_type: "github_investigation_file"
    evidence_location: "runs/{jira_id}/{run_id}/agent_c_github.json"
    validation_required: true

monitoring_config:
  # Performance and reliability monitoring
  performance_metrics:
    - "repository_search_count"
    - "pr_analysis_depth"
    - "code_investigation_coverage"
    - "ai_analysis_accuracy"
    - "mcp_performance_gain"
  
  github_api_metrics:
    - "api_rate_limit_usage"
    - "search_query_efficiency"
    - "repository_access_success"
    - "pr_data_completeness"
  
  reliability_checks:
    - "github_api_availability"
    - "mcp_service_health"
    - "ai_model_responsiveness"
    - "context_inheritance_integrity"

advanced_features:
  # Advanced AI capabilities
  semantic_code_analysis:
    enable_pattern_recognition: true
    detect_anti_patterns: true
    identify_best_practices: true
    assess_code_quality: true
  
  dependency_analysis:
    map_component_dependencies: true
    track_version_compatibility: true
    identify_breaking_changes: true
    assess_upgrade_impact: true
  
  test_intelligence:
    analyze_existing_tests: true
    identify_test_gaps: true
    suggest_test_scenarios: true
    assess_coverage_quality: true

security_considerations:
  # Security and access control
  github_access:
    authentication_method: "github_token"
    scope_limitations: "read_only"
    rate_limit_management: true
    audit_logging: true
  
  code_analysis_safety:
    no_code_execution: true
    read_only_analysis: true
    sanitized_output: true
    credential_protection: true

deployment_metadata:
  # Deployment configuration
  deployment_mode: "hybrid_ai_traditional"
  resource_requirements:
    cpu_cores: 3
    memory_gb: 8
    network_bandwidth: "high"
    github_api_quota: "5000_requests_hour"
  
  dependencies:
    - "foundation_context.py"
    - "progressive_context_setup.py"
    - "github_api_client.py"
    - "mcp_github_service.py"
    - "ai_code_analyzer.py"
  
  configuration_files:
    - ".claude/config/github_config.json"
    - ".claude/config/mcp_github_config.json"
    - ".claude/config/ai_models_config.json"
    - ".claude/config/repository_targets.json"