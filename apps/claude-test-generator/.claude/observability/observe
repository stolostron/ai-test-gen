#!/usr/bin/env python3
"""
Claude Test Generator - Observability Command Interface

Real-time command interface for framework observability during execution.
Provides instant access to framework status, agent progress, and insights.

Usage:
    ./observe /status
    ./observe /business
    ./observe /deep-dive agent_a
    ./observe /help
"""

import sys
import os
from pathlib import Path

# Add the current directory to Python path for imports
sys.path.insert(0, str(Path(__file__).parent))

from observability_command_handler import ObservabilityCommandHandler

def main():
    """Main command interface"""
    
    # Check if command provided
    if len(sys.argv) < 2:
        print("üîç **Claude Test Generator - Observability Interface**")
        print("")
        print("**Usage:**")
        print("  ./observe <command>")
        print("")
        print("**Quick Commands:**")
        print("  ./observe /status      - Current execution progress")
        print("  ./observe /business    - Customer impact analysis")  
        print("  ./observe /technical   - Implementation details")
        print("  ./observe /agents      - Sub-agent coordination status")
        print("  ./observe /help        - Full command reference")
        print("")
        print("**Examples:**")
        print("  ./observe /deep-dive agent_a")
        print("  ./observe /context-flow")
        print("  ./observe /risks")
        return
    
    command = sys.argv[1]
    
    # Initialize observability handler
    try:
        handler = ObservabilityCommandHandler()
        
        # Process command and display response
        response = handler.process_command(command)
        print(response)
        
    except FileNotFoundError as e:
        print("‚ö†Ô∏è **Observability Data Not Found**")
        print("")
        print("This usually means:")
        print("‚Ä¢ Framework is not currently running")
        print("‚Ä¢ No recent run data available") 
        print("‚Ä¢ Working directory is not a test-generator project")
        print("")
        print("**Solution:** Run observability commands from the test-generator directory during active framework execution.")
        
    except ImportError as e:
        print("‚ùå **Import Error**")
        print(f"Cannot import observability modules: {e}")
        print("")
        print("**Solution:** Ensure you're running from the correct directory with all required modules.")
        
    except Exception as e:
        print("üö® **Observability Error**")
        print(f"Error processing command '{command}': {e}")
        print("")
        print("**Solution:** Check command syntax or use '/help' for available commands.")

if __name__ == "__main__":
    main()