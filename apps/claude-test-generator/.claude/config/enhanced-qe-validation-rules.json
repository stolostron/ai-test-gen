{
  "enhanced_qe_validation_rules": {
    "validation_framework": "EVIDENCE_BASED_QE_ANALYSIS_ENFORCEMENT",
    "enforcement_level": "CRITICAL_BLOCKING",
    "validation_phases": ["pre_analysis", "during_analysis", "post_analysis"],
    
    "actual_test_verification": {
      "test_file_existence_validation": {
        "rule": "All referenced QE tests must exist in actual repository files",
        "check_method": "file_system_verification_with_content_analysis",
        "blocking_level": "CRITICAL",
        "error_action": "REMOVE_NON_EXISTENT_TEST_REFERENCES",
        "validation_sources": [
          "stolostron/clc-ui-e2e/**/*.spec.js",
          "stolostron/clc-ui-e2e/**/*.test.*",
          "stolostron/clc-ui-e2e/**/*.cy.js"
        ]
      },
      "test_implementation_verification": {
        "rule": "All QE coverage claims must be verified against actual test implementations",
        "check_method": "test_file_content_analysis_and_implementation_verification",
        "blocking_level": "CRITICAL",
        "error_action": "REJECT_UNVERIFIED_COVERAGE_CLAIMS",
        "verification_criteria": [
          "test_functionality_verification",
          "implementation_pattern_analysis",
          "coverage_scope_validation"
        ]
      },
      "test_pattern_extraction": {
        "rule": "All QE pattern references must be extracted from actual successful tests",
        "check_method": "pattern_analysis_from_actual_test_implementations",
        "blocking_level": "HIGH",
        "error_action": "REPLACE_WITH_VERIFIED_PATTERNS",
        "pattern_sources": [
          "proven_successful_test_files",
          "verified_test_implementation_patterns",
          "actual_test_workflow_structures"
        ]
      }
    },
    
    "implementation_reality_alignment": {
      "feature_availability_validation": {
        "rule": "QE analysis must align with Implementation Reality Agent feature availability findings",
        "check_method": "cross_agent_consistency_validation",
        "blocking_level": "CRITICAL",
        "error_action": "BLOCK_QE_ANALYSIS_FOR_UNAVAILABLE_FEATURES",
        "alignment_criteria": [
          "feature_deployment_status_consistency",
          "version_context_alignment",
          "implementation_capability_agreement"
        ]
      },
      "version_context_integration": {
        "rule": "QE analysis must include version gap context and feature deployment status",
        "check_method": "version_context_verification_and_integration",
        "blocking_level": "HIGH",
        "error_action": "ADD_MISSING_VERSION_CONTEXT",
        "context_requirements": [
          "target_environment_version_awareness",
          "feature_version_gap_analysis",
          "deployment_status_consideration"
        ]
      },
      "capability_verification": {
        "rule": "QE recommendations must target actual implementation capabilities",
        "check_method": "implementation_capability_cross_validation",
        "blocking_level": "CRITICAL",
        "error_action": "REMOVE_RECOMMENDATIONS_FOR_NON_EXISTENT_CAPABILITIES",
        "verification_sources": [
          "implementation_reality_agent_findings",
          "actual_codebase_capability_analysis",
          "feature_implementation_verification"
        ]
      }
    },
    
    "repository_focus_enforcement": {
      "primary_repository_validation": {
        "rule": "QE analysis must focus primarily on team-managed repositories",
        "check_method": "repository_focus_compliance_verification",
        "blocking_level": "HIGH",
        "error_action": "REDIRECT_TO_PRIMARY_TEAM_REPOSITORY",
        "primary_repositories": ["stolostron/clc-ui-e2e"],
        "repository_classification": "team_managed_comprehensive_analysis"
      },
      "excluded_repository_enforcement": {
        "rule": "QE analysis must exclude non-team-managed repositories",
        "check_method": "repository_exclusion_compliance_check",
        "blocking_level": "CRITICAL",
        "error_action": "REMOVE_EXCLUDED_REPOSITORY_ANALYSIS",
        "excluded_repositories": ["stolostron/cluster-lifecycle-e2e"],
        "exclusion_reason": "not_team_managed"
      },
      "restricted_repository_compliance": {
        "rule": "Restricted repositories used only when specifically mentioned by user",
        "check_method": "user_mention_verification_for_restricted_repositories",
        "blocking_level": "HIGH",
        "error_action": "REMOVE_UNAUTHORIZED_RESTRICTED_REPOSITORY_USAGE",
        "restricted_repositories": {
          "stolostron/acmqe-clc-test": {
            "usage_condition": "only_when_specifically_mentioned_by_user",
            "repository_type": "api_focused_not_primary_ui_e2e"
          }
        }
      }
    },
    
    "evidence_based_gap_analysis": {
      "coverage_mapping_validation": {
        "rule": "QE coverage mapping must be based on actual test file analysis",
        "check_method": "actual_test_to_feature_mapping_verification",
        "blocking_level": "CRITICAL",
        "error_action": "REGENERATE_COVERAGE_MAPPING_WITH_ACTUAL_TEST_EVIDENCE",
        "mapping_requirements": [
          "actual_test_file_content_analysis",
          "feature_requirement_comparison",
          "implementation_scope_verification"
        ]
      },
      "gap_identification_validation": {
        "rule": "QE coverage gaps must be identified based on evidence comparison",
        "check_method": "evidence_based_gap_identification_verification",
        "blocking_level": "HIGH",
        "error_action": "REVISE_GAP_ANALYSIS_WITH_EVIDENCE",
        "identification_criteria": [
          "actual_test_coverage_analysis",
          "feature_requirement_gap_assessment",
          "implementation_reality_consideration"
        ]
      },
      "priority_assessment_validation": {
        "rule": "QE gap priorities must consider implementation reality and feature availability",
        "check_method": "reality_based_priority_assessment_verification",
        "blocking_level": "MEDIUM",
        "error_action": "ADJUST_PRIORITIES_WITH_REALITY_CONTEXT",
        "priority_factors": [
          "feature_availability_status",
          "implementation_deployment_readiness",
          "version_context_considerations"
        ]
      }
    },
    
    "recommendation_quality_validation": {
      "actionability_verification": {
        "rule": "All QE recommendations must be actionable based on actual implementation",
        "check_method": "implementation_actionability_verification",
        "blocking_level": "CRITICAL",
        "error_action": "REMOVE_UNACTIONABLE_RECOMMENDATIONS",
        "actionability_criteria": [
          "implementation_capability_support",
          "feature_availability_in_target_environment",
          "actual_test_implementation_feasibility"
        ]
      },
      "reality_alignment_verification": {
        "rule": "QE recommendations must align with Implementation Reality findings",
        "check_method": "cross_agent_recommendation_consistency_check",
        "blocking_level": "CRITICAL",
        "error_action": "ALIGN_RECOMMENDATIONS_WITH_IMPLEMENTATION_REALITY",
        "alignment_requirements": [
          "feature_availability_consistency",
          "implementation_capability_agreement",
          "version_context_alignment"
        ]
      },
      "pattern_consistency_verification": {
        "rule": "QE recommendations must be consistent with proven test patterns",
        "check_method": "pattern_consistency_cross_validation",
        "blocking_level": "HIGH",
        "error_action": "ALIGN_RECOMMENDATIONS_WITH_PROVEN_PATTERNS",
        "consistency_sources": [
          "pattern_extension_service_findings",
          "actual_successful_test_patterns",
          "proven_implementation_approaches"
        ]
      }
    },
    
    "integration_validation": {
      "implementation_reality_coordination": {
        "coordination_consistency": {
          "rule": "QE analysis must maintain consistency with Implementation Reality Agent",
          "validation_method": "cross_agent_consistency_verification",
          "coordination_criteria": [
            "feature_availability_agreement",
            "implementation_capability_alignment",
            "version_context_consistency"
          ],
          "blocking_level": "CRITICAL",
          "error_action": "RECONCILE_WITH_IMPLEMENTATION_REALITY"
        }
      },
      "pattern_extension_coordination": {
        "pattern_consistency": {
          "rule": "QE analysis must be consistent with Pattern Extension Service findings",
          "validation_method": "pattern_consistency_cross_validation",
          "consistency_criteria": [
            "test_pattern_alignment",
            "implementation_approach_consistency",
            "quality_standard_alignment"
          ],
          "blocking_level": "HIGH",
          "error_action": "ALIGN_WITH_PATTERN_EXTENSION_FINDINGS"
        }
      },
      "cross_agent_validation_compliance": {
        "framework_consistency": {
          "rule": "QE analysis must maintain framework-wide consistency",
          "validation_method": "framework_state_consistency_verification",
          "consistency_criteria": [
            "agent_output_compatibility",
            "evidence_cross_validation",
            "quality_gate_compliance"
          ],
          "blocking_level": "CRITICAL",
          "error_action": "RESTORE_FRAMEWORK_CONSISTENCY"
        }
      }
    }
  },
  
  "acm_22079_specific_validation": {
    "scenario": "cluster_update_digest_qe_analysis",
    "repository_focus": "stolostron/clc-ui-e2e",
    
    "specific_validation_rules": {
      "actual_test_coverage_validation": {
        "rule": "QE coverage assessment must be based on actual test files in stolostron/clc-ui-e2e",
        "validation_method": "comprehensive_test_file_analysis",
        "expected_result": "Evidence-based coverage mapping from actual test implementations",
        "blocking_level": "CRITICAL",
        "success_criteria": "QE analysis correctly identifies actual test coverage for cluster upgrade scenarios"
      },
      
      "implementation_alignment_validation": {
        "rule": "QE recommendations must align with Implementation Reality feature availability findings",
        "validation_method": "cross_agent_consistency_verification",
        "implementation_reality_context": "feature_NOT_available_95_percent_confidence",
        "expected_alignment": "QE analysis acknowledges feature unavailability",
        "blocking_level": "CRITICAL",
        "success_criteria": "QE analysis provides version-aware guidance respecting implementation reality"
      },
      
      "repository_focus_validation": {
        "rule": "QE analysis must focus on team-managed repositories and exclude non-team repositories",
        "validation_method": "repository_compliance_verification",
        "primary_focus": "stolostron/clc-ui-e2e",
        "excluded_repositories": ["stolostron/cluster-lifecycle-e2e"],
        "blocking_level": "HIGH",
        "success_criteria": "QE analysis focuses on appropriate repositories with strict exclusion compliance"
      },
      
      "evidence_based_gap_analysis_validation": {
        "rule": "QE gap analysis must be based on actual test file evidence",
        "validation_method": "evidence_verification_for_gap_identification",
        "gap_analysis_method": "actual_test_coverage_vs_feature_requirements",
        "expected_evidence": "Complete test file analysis supporting gap identification",
        "blocking_level": "HIGH",
        "success_criteria": "QE gap analysis provides actionable evidence-based recommendations"
      }
    },
    
    "failure_prevention_validation": {
      "original_failure_points": [
        {
          "failure": "assumption_based_coverage",
          "validation": "actual_test_file_verification",
          "expected_prevention": "QE coverage based on actual test file analysis"
        },
        {
          "failure": "fictional_test_references",
          "validation": "test_existence_and_functionality_verification",
          "expected_prevention": "All test references verified against actual repository contents"
        },
        {
          "failure": "implementation_misalignment",
          "validation": "implementation_reality_cross_validation",
          "expected_prevention": "QE recommendations align with actual implementation capabilities"
        },
        {
          "failure": "version_context_ignorance",
          "validation": "version_gap_integration_verification",
          "expected_prevention": "QE analysis includes version context and feature availability"
        }
      ],
      
      "success_criteria": {
        "evidence_based_approach": "All QE analysis based on actual test file evidence",
        "implementation_alignment": "Perfect alignment with Implementation Reality findings",
        "repository_focus_compliance": "Strict adherence to repository focus and exclusion policies",
        "actionable_recommendations": "All QE recommendations actionable in actual environment"
      }
    }
  },
  
  "validation_execution": {
    "real_time_validation": {
      "frequency": "continuous_during_qe_analysis",
      "validation_triggers": [
        "test_reference_addition",
        "coverage_claim_generation",
        "gap_identification",
        "recommendation_creation"
      ],
      "immediate_blocking": true
    },
    
    "comprehensive_validation": {
      "frequency": "post_qe_analysis_complete",
      "validation_scope": "complete_qe_analysis_output",
      "requirements": [
        "full_evidence_verification_audit",
        "complete_implementation_alignment_check",
        "comprehensive_repository_focus_compliance",
        "framework_consistency_validation"
      ],
      "final_approval_required": true
    },
    
    "validation_reporting": {
      "evidence_verification_report": {
        "content": "Complete verification of all QE analysis evidence against actual test files",
        "format": "test_file:analysis_claim verification_status"
      },
      "implementation_alignment_report": {
        "content": "QE analysis alignment with Implementation Reality Agent findings",
        "format": "qe_recommendation: implementation_reality_status alignment_verification"
      },
      "repository_compliance_report": {
        "content": "Repository focus and exclusion compliance verification",
        "format": "repository_name: focus_compliance exclusion_compliance usage_authorization"
      },
      "quality_metrics_report": {
        "content": "Quantitative quality assessment of QE analysis",
        "format": "metric_name: score/threshold evidence_quality_level"
      }
    }
  }
}