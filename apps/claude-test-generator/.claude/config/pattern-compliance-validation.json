{
  "pattern_compliance_validation": {
    "validation_framework": "COMPREHENSIVE_PATTERN_ENFORCEMENT",
    "enforcement_level": "CRITICAL_BLOCKING",
    "validation_phases": ["pre_generation", "during_generation", "post_generation"],
    
    "pattern_source_validation": {
      "source_file_requirements": {
        "existence_validation": {
          "rule": "All referenced source pattern files must exist and be accessible",
          "check_method": "file_system_verification",
          "blocking_level": "CRITICAL",
          "error_action": "HALT_PATTERN_EXTENSION"
        },
        "success_validation": {
          "rule": "Source pattern files must contain successful test cases",
          "check_method": "test_result_analysis",
          "blocking_level": "CRITICAL", 
          "error_action": "REJECT_UNRELIABLE_SOURCE"
        },
        "relevance_validation": {
          "rule": "Source patterns must be relevant to target scenario",
          "check_method": "semantic_similarity_analysis",
          "blocking_level": "HIGH",
          "error_action": "FIND_ALTERNATIVE_SOURCE"
        }
      },
      
      "pattern_element_validation": {
        "ui_element_verification": {
          "rule": "All UI selectors must exist in source pattern files or page objects",
          "check_method": "selector_existence_verification",
          "sources": [
            "cypress/views/**/*.js",
            "source_pattern_files"
          ],
          "blocking_level": "CRITICAL",
          "error_action": "REMOVE_FICTIONAL_SELECTORS"
        },
        "cli_command_verification": {
          "rule": "All CLI commands must exist in source pattern files",
          "check_method": "command_usage_verification",
          "sources": [
            "automation_upgrade.spec.js",
            "automation_action.spec.js",
            "cypress/apis/*.js"
          ],
          "blocking_level": "CRITICAL",
          "error_action": "REMOVE_UNPROVEN_COMMANDS"
        },
        "yaml_schema_verification": {
          "rule": "All YAML fields must be validated in existing successful tests",
          "check_method": "schema_field_verification",
          "sources": [
            "cypress/fixtures/**/*.yaml",
            "test_file_yaml_usage"
          ],
          "blocking_level": "CRITICAL",
          "error_action": "REMOVE_INVALID_FIELDS"
        }
      }
    },
    
    "pattern_extension_validation": {
      "structural_integrity": {
        "workflow_preservation": {
          "rule": "Core workflow structure must be preserved from source pattern",
          "validation_criteria": [
            "test_setup_pattern_maintained",
            "execution_sequence_preserved", 
            "validation_approach_consistent",
            "cleanup_pattern_maintained"
          ],
          "tolerance_level": "10%",
          "blocking_level": "HIGH",
          "error_action": "RESTORE_PATTERN_INTEGRITY"
        },
        "timing_pattern_preservation": {
          "rule": "Wait patterns and timeouts must match source pattern approaches",
          "validation_criteria": [
            "wait_until_patterns_consistent",
            "timeout_values_reasonable",
            "interval_patterns_preserved"
          ],
          "blocking_level": "MEDIUM",
          "error_action": "ADJUST_TIMING_PATTERNS"
        }
      },
      
      "contextual_adaptation_validation": {
        "component_substitution": {
          "rule": "Component substitutions must maintain pattern functionality",
          "validation_criteria": [
            "variable_naming_consistency",
            "data_type_compatibility",
            "functional_equivalence"
          ],
          "blocking_level": "HIGH",
          "error_action": "REVISE_SUBSTITUTIONS"
        },
        "scope_appropriateness": {
          "rule": "Pattern extensions must be appropriate for target scenario",
          "validation_criteria": [
            "semantic_alignment",
            "complexity_appropriateness",
            "feature_compatibility"
          ],
          "blocking_level": "MEDIUM",
          "error_action": "REFINE_SCOPE"
        }
      }
    },
    
    "quality_assurance_validation": {
      "traceability_validation": {
        "source_attribution": {
          "rule": "Every test element must have clear source pattern attribution",
          "validation_method": "traceability_matrix_verification",
          "required_attributes": [
            "source_file_reference",
            "source_line_numbers",
            "pattern_type_classification",
            "confidence_level"
          ],
          "blocking_level": "CRITICAL",
          "error_action": "ADD_MISSING_ATTRIBUTION"
        },
        "evidence_completeness": {
          "rule": "All pattern claims must have complete supporting evidence",
          "validation_method": "evidence_audit",
          "required_evidence": [
            "source_pattern_existence",
            "element_usage_proof",
            "success_verification",
            "implementation_capability"
          ],
          "blocking_level": "CRITICAL",
          "error_action": "PROVIDE_MISSING_EVIDENCE"
        }
      },
      
      "success_prediction_validation": {
        "confidence_scoring": {
          "rule": "Pattern extensions must achieve minimum confidence threshold",
          "minimum_confidence": "85%",
          "scoring_factors": [
            "source_pattern_reliability",
            "element_verification_rate",
            "structural_preservation_score",
            "implementation_alignment_score"
          ],
          "blocking_level": "HIGH",
          "error_action": "IMPROVE_CONFIDENCE_OR_REJECT"
        },
        "risk_assessment": {
          "rule": "Pattern extensions must have acceptable risk levels",
          "maximum_risk": "15%",
          "risk_factors": [
            "fictional_element_presence",
            "unverified_assumptions",
            "implementation_contradictions",
            "pattern_integrity_violations"
          ],
          "blocking_level": "HIGH",
          "error_action": "MITIGATE_RISKS_OR_REJECT"
        }
      }
    },
    
    "integration_validation": {
      "implementation_reality_alignment": {
        "reality_consistency": {
          "rule": "Pattern extensions must align with Implementation Reality Agent findings",
          "validation_method": "cross_agent_consistency_check",
          "alignment_criteria": [
            "capability_verification_agreement",
            "element_existence_agreement",
            "implementation_method_agreement"
          ],
          "blocking_level": "CRITICAL",
          "error_action": "RECONCILE_WITH_REALITY"
        }
      },
      
      "cross_agent_validation_alignment": {
        "framework_consistency": {
          "rule": "Pattern extensions must maintain framework state consistency",
          "validation_method": "framework_state_validation",
          "consistency_criteria": [
            "agent_output_compatibility",
            "evidence_cross_validation",
            "quality_gate_compliance"
          ],
          "blocking_level": "CRITICAL",
          "error_action": "RESTORE_FRAMEWORK_CONSISTENCY"
        }
      }
    }
  },
  
  "acm_22079_specific_validation": {
    "scenario": "cluster_update_digest_testing",
    "pattern_source": "automation_upgrade.spec.js",
    
    "specific_validation_rules": {
      "ui_functionality_validation": {
        "rule": "NO UI test generation without proven UI pattern evidence",
        "validation_method": "ui_pattern_existence_check",
        "expected_result": "BLOCK UI generation due to lack of UI upgrade patterns",
        "blocking_level": "CRITICAL",
        "success_criteria": "Pattern Extension Service correctly identifies CLI-only approach"
      },
      
      "yaml_field_validation": {
        "rule": "Only use YAML fields proven in automation_upgrade.spec.js",
        "validation_method": "yaml_field_verification",
        "proven_fields": [
          "metadata.annotations.cluster.open-cluster-management.io/upgrade-allow-not-recommended-versions",
          "spec.desiredCuration",
          "spec.upgrade.desiredUpdate"
        ],
        "blocked_fields": [
          "spec.upgrade.imageDigest",
          "spec.upgrade.digestUpdate",
          "any_unverified_field"
        ],
        "blocking_level": "CRITICAL",
        "success_criteria": "Pattern Extension Service uses only proven YAML fields"
      },
      
      "workflow_pattern_validation": {
        "rule": "Extend CLI upgrade workflow from lines 75-94 of automation_upgrade.spec.js",
        "validation_method": "workflow_pattern_verification",
        "required_elements": [
          "updateJobTemplateYamlByCli_pattern",
          "waitUntil_with_cluster_status_pattern",
          "getManagedClusterInfo_validation_pattern"
        ],
        "adaptation_requirements": [
          "maintain_cli_approach",
          "preserve_yaml_manipulation_structure",
          "adapt_validation_to_digest_context"
        ],
        "blocking_level": "HIGH",
        "success_criteria": "Generated tests follow proven CLI workflow pattern"
      }
    },
    
    "failure_prevention_validation": {
      "original_failure_points": [
        {
          "failure": "fictional_ui_workflows",
          "validation": "ui_pattern_existence_check",
          "expected_prevention": "BLOCK UI generation due to no UI evidence"
        },
        {
          "failure": "invalid_yaml_fields",
          "validation": "yaml_field_verification", 
          "expected_prevention": "REJECT imageDigest field as unverified"
        },
        {
          "failure": "contradictory_agent_outputs",
          "validation": "cross_agent_consistency_check",
          "expected_prevention": "RECONCILE contradictions before test generation"
        },
        {
          "failure": "assumption_based_generation",
          "validation": "pattern_source_verification",
          "expected_prevention": "REQUIRE proven pattern source for all elements"
        }
      ],
      
      "success_criteria": {
        "pattern_based_approach": "All test elements traceable to automation_upgrade.spec.js",
        "implementation_alignment": "All test actions proven in existing CLI tests",
        "fictional_prevention": "Zero UI elements without existing pattern evidence",
        "framework_consistency": "Pattern extensions maintain consistent framework state"
      }
    }
  },
  
  "validation_execution": {
    "real_time_validation": {
      "frequency": "continuous_during_generation",
      "validation_triggers": [
        "element_addition",
        "pattern_extension", 
        "workflow_modification",
        "validation_addition"
      ],
      "immediate_blocking": true
    },
    
    "comprehensive_validation": {
      "frequency": "post_generation_complete",
      "validation_scope": "complete_test_output",
      "requirements": [
        "full_traceability_audit",
        "complete_evidence_verification",
        "comprehensive_quality_assessment",
        "framework_consistency_validation"
      ],
      "final_approval_required": true
    },
    
    "validation_reporting": {
      "traceability_report": {
        "content": "Complete mapping of test elements to source patterns",
        "format": "source_file:line_numbers -> test_element mapping"
      },
      "compliance_report": {
        "content": "Validation rule compliance status and any violations",
        "format": "rule_name: PASS/FAIL with evidence"
      },
      "quality_metrics_report": {
        "content": "Quantitative quality assessment scores",
        "format": "metric_name: score/threshold with confidence level"
      }
    }
  }
}