{
  "cross_agent_validation_engine": {
    "execution_model": "continuous_monitoring",
    "authority_level": "framework_halt",
    "validation_triggers": [
      "pre_agent_execution",
      "post_agent_execution", 
      "inter_agent_transition",
      "final_framework_validation"
    ],
    "fundamental_consistency_rules": {
      "feature_availability": {
        "agents_required": [
          "implementation_reality",
          "feature_detection", 
          "github_investigation"
        ],
        "consistency_rule": "All agents must agree on feature availability status",
        "conflict_resolution": "Implementation Reality Agent has final authority",
        "blocking_condition": "If any agent claims unavailable, test generation must be blocked"
      },
      "implementation_methods": {
        "agents_required": [
          "implementation_reality",
          "documentation_intelligence",
          "qe_intelligence"
        ],
        "consistency_rule": "All agents must agree on UI vs CLI vs API approach",
        "conflict_resolution": "Code evidence takes precedence over documentation",
        "blocking_condition": "Cannot generate tests for implementation method not found in code"
      },
      "schema_definitions": {
        "agents_required": [
          "implementation_reality",
          "github_investigation",
          "test_generation"
        ],
        "consistency_rule": "All YAML/JSON field usage must match actual schemas",
        "conflict_resolution": "Block usage of fields not found in Implementation Reality scan",
        "blocking_condition": "Cannot use schema fields not found in actual codebase"
      }
    },
    "validation_gates": {
      "critical_contradiction_detection": {
        "enabled": true,
        "scenarios": [
          {
            "name": "feature_availability_contradiction",
            "condition": "feature_detection.status == 'NOT_AVAILABLE' AND (documentation_intelligence.generates_ui OR test_generation.creates_ui_tests)",
            "action": "HALT_FRAMEWORK",
            "message": "Cannot generate UI tests for unavailable features"
          },
          {
            "name": "schema_field_contradiction", 
            "condition": "implementation_reality.schema_fields NOT CONTAINS test_generation.yaml_fields",
            "action": "HALT_FRAMEWORK",
            "message": "Cannot use YAML fields not found in actual schemas"
          },
          {
            "name": "implementation_method_contradiction",
            "condition": "implementation_reality.ui_exists == false AND test_generation.method == 'UI'",
            "action": "HALT_FRAMEWORK", 
            "message": "Cannot generate UI tests when no UI functionality exists"
          }
        ]
      },
      "evidence_quality_gates": {
        "enabled": true,
        "requirements": {
          "minimum_evidence_score": 0.8,
          "mandatory_evidence_for_claims": true,
          "source_attribution_required": true,
          "consistency_validation": true
        }
      }
    },
    "agent_coordination": {
      "dependency_management": {
        "implementation_reality": {
          "dependencies": [],
          "provides": ["codebase_reality", "schema_definitions", "ui_capabilities"],
          "authority": "highest"
        },
        "feature_detection": {
          "dependencies": ["implementation_reality"],
          "provides": ["feature_availability", "confidence_assessment"],
          "authority": "high"
        },
        "documentation_intelligence": {
          "dependencies": ["implementation_reality", "feature_detection"],
          "provides": ["documentation_patterns", "workflow_guidance"],
          "authority": "medium",
          "constraints": ["must_align_with_implementation_reality"]
        },
        "test_generation": {
          "dependencies": ["implementation_reality", "feature_detection", "documentation_intelligence"],
          "provides": ["test_cases", "validation_patterns"],
          "authority": "lowest",
          "constraints": ["must_use_validated_schemas", "must_match_actual_implementation"]
        }
      }
    },
    "conflict_resolution": {
      "authority_hierarchy": [
        "implementation_reality",
        "code_evidence",
        "feature_detection", 
        "environment_validation",
        "documentation_intelligence",
        "test_generation"
      ],
      "resolution_mechanisms": {
        "evidence_reconciliation": {
          "enabled": true,
          "require_concrete_evidence": true,
          "source_verification": true
        },
        "framework_halt": {
          "enabled": true,
          "conditions": ["fundamental_disagreement", "insufficient_evidence", "quality_failure"]
        }
      }
    }
  },
  "validation_metrics": {
    "success_criteria": {
      "zero_framework_inconsistencies": true,
      "100_percent_evidence_backing": true,
      "conflict_resolution_rate": 1.0,
      "quality_gate_compliance": true
    },
    "monitoring": {
      "track_contradictions": true,
      "evidence_quality_scoring": true,
      "framework_state_consistency": true,
      "agent_performance_metrics": true
    }
  }
}