{
  "enhanced_qe_intelligence_service": {
    "service_configuration": "REALITY_BASED_QE_ANALYSIS",
    "integration_level": "COMPREHENSIVE_FRAMEWORK_INTEGRATION",
    "execution_phase": "2.5",
    "priority": "HIGH",
    "blocking_authority": true,
    "mandatory_coordination": ["implementation_reality_agent", "pattern_extension_service", "cross_agent_validation_engine"],
    
    "ultrathink_qe_analysis_engine": {
      "strategic_pattern_intelligence": {
        "ultrathink_reasoning": "sophisticated_reasoning_about_optimal_testing_patterns_across_ACM_components",
        "deep_analysis_capabilities": "strategic_testing_pattern_intelligence_using_ultrathink_analysis",
        "pattern_synthesis": "synthesize_testing_approaches_through_sophisticated_reasoning",
        "strategic_recommendations": "ultrathink_powered_guidance_for_test_generation_focus_areas"
      },
      
      "coverage_gap_ultrathink_analysis": {
        "sophisticated_gap_detection": "ultrathink_powered_identification_of_coverage_gaps_and_testing_opportunities",
        "strategic_priority_reasoning": "deep_reasoning_about_testing_priorities_based_on_business_impact",
        "pattern_based_recommendations": "strategic_testing_recommendations_combining_pattern_intelligence_with_feature_understanding",
        "comprehensive_feature_coverage_priority": "complete_feature_testing_prioritized_over_duplication_avoidance"
      }
    },
    
    "evidence_based_analysis_engine": {
      "actual_test_file_scanning": {
        "primary_sources": [
          "stolostron/clc-ui-e2e/**/*.spec.js",
          "stolostron/clc-ui-e2e/**/*.test.*",
          "stolostron/clc-ui-e2e/**/*.cy.js"
        ],
        "excluded_repositories": [
          "stolostron/cluster-lifecycle-e2e"
        ],
        "restricted_repositories": {
          "stolostron/acmqe-clc-test": "only_when_specifically_mentioned"
        },
        "scanning_depth": "comprehensive_implementation_analysis",
        "pattern_extraction": "proven_successful_test_patterns_with_ultrathink_reasoning",
        "ultrathink_pattern_analysis": "sophisticated_reasoning_about_testing_approaches_and_strategic_patterns",
        "verification_level": "actual_implementation_verification"
      },
      
      "coverage_analysis_methodology": {
        "analysis_approach": "evidence_based_actual_test_mapping_with_ultrathink_reasoning",
        "gap_identification": "implementation_verified_gaps_using_sophisticated_pattern_analysis",
        "priority_assessment": "feature_availability_aware_prioritization_with_ultrathink_strategy",
        "recommendation_generation": "actionable_reality_based_guidance_informed_by_ultrathink_analysis",
        "quality_standards": "high_confidence_evidence_backed_with_strategic_intelligence",
        "ultrathink_integration": "sophisticated_reasoning_throughout_all_analysis_phases"
      },
      
      "reality_alignment_requirements": {
        "implementation_reality_coordination": "mandatory_consistency_check",
        "feature_availability_validation": "version_context_aware_analysis",
        "capability_verification": "actual_implementation_capability_validation",
        "contradiction_prevention": "block_analysis_conflicting_with_reality"
      }
    },
    
    "repository_intelligence_framework": {
      "team_repository_focus": {
        "primary_repository": "stolostron/clc-ui-e2e",
        "repository_type": "team_managed_comprehensive_analysis",
        "analysis_depth": "complete_test_implementation_analysis_with_ultrathink_reasoning",
        "pattern_extraction": "proven_successful_test_patterns_using_strategic_intelligence",
        "ultrathink_capabilities": "sophisticated_reasoning_about_optimal_testing_patterns_across_different_ACM_components",
        "coverage_mapping": "actual_test_to_feature_mapping"
      },
      
      "repository_exclusions": {
        "excluded_repositories": ["stolostron/cluster-lifecycle-e2e"],
        "exclusion_reason": "not_team_managed",
        "enforcement_level": "strict_blocking",
        "fallback_behavior": "intelligent_search_respecting_exclusions"
      },
      
      "repository_restrictions": {
        "restricted_repositories": {
          "stolostron/acmqe-clc-test": {
            "access_condition": "only_when_specifically_mentioned_by_user",
            "usage_limitation": "api_focused_repository_not_primary_ui_e2e",
            "analysis_scope": "limited_to_specific_user_request_context"
          }
        }
      }
    },
    
    "integration_coordination": {
      "implementation_reality_agent_integration": {
        "coordination_protocol": "mandatory_consistency_validation",
        "evidence_sharing": "bidirectional_implementation_evidence_exchange",
        "blocking_conditions": [
          "qe_analysis_contradicts_implementation_reality",
          "qe_recommendations_for_unavailable_features",
          "qe_analysis_lacks_implementation_evidence"
        ],
        "alignment_requirements": [
          "feature_availability_consistency",
          "version_context_integration",
          "implementation_capability_alignment"
        ]
      },
      
      "pattern_extension_service_integration": {
        "coordination_protocol": "pattern_validation_cross_reference",
        "evidence_sharing": "test_pattern_evidence_coordination",
        "consistency_requirements": [
          "qe_patterns_align_with_proven_test_patterns",
          "qe_analysis_consistent_with_pattern_based_approach",
          "qe_recommendations_compatible_with_pattern_extension"
        ],
        "quality_alignment": "maintain_pattern_extension_quality_standards"
      },
      
      "cross_agent_validation_engine_integration": {
        "validation_compliance": "meet_all_framework_validation_requirements",
        "evidence_standards": "comply_with_framework_wide_evidence_standards",
        "quality_gates": "pass_all_cross_agent_validation_quality_gates",
        "framework_consistency": "maintain_consistent_framework_state"
      }
    },
    
    "quality_assurance_configuration": {
      "evidence_verification_standards": {
        "test_file_analysis_requirement": "100_percent_actual_test_file_verification",
        "implementation_verification": "comprehensive_test_implementation_analysis",
        "coverage_mapping_accuracy": "actual_test_to_feature_mapping_validation",
        "gap_identification_evidence": "evidence_based_gap_analysis_required_with_ultrathink_strategic_reasoning"
      },
      
      "recommendation_quality_standards": {
        "actionability_requirement": "all_recommendations_must_be_actionable_based_on_actual_implementation",
        "priority_assessment": "evidence_based_priority_with_feature_availability_context",
        "reality_alignment": "all_recommendations_aligned_with_implementation_reality",
        "pattern_consistency": "recommendations_consistent_with_proven_test_patterns",
        "ultrathink_quality": "sophisticated_reasoning_ensures_strategic_testing_pattern_intelligence"
      },
      
      "blocking_mechanisms": {
        "insufficient_evidence": "block_qe_analysis_without_sufficient_actual_test_evidence",
        "implementation_contradiction": "block_qe_recommendations_contradicting_implementation_reality",
        "feature_unavailability": "block_qe_analysis_for_unavailable_features",
        "pattern_inconsistency": "block_qe_recommendations_inconsistent_with_proven_patterns"
      }
    },
    
    "acm_22079_specific_prevention": {
      "scenario_validation": "cluster_update_digest_qe_analysis",
      "prevention_mechanisms": {
        "assumption_based_coverage_prevention": {
          "rule": "all_qe_coverage_claims_must_be_verified_against_actual_test_files",
          "validation": "comprehensive_test_file_analysis_for_coverage_verification",
          "blocking_condition": "no_coverage_assessment_without_actual_test_evidence"
        },
        "fictional_test_reference_prevention": {
          "rule": "all_referenced_qe_tests_must_exist_and_be_verified_functional",
          "validation": "test_existence_and_implementation_verification",
          "blocking_condition": "cannot_reference_non_existent_or_non_functional_tests"
        },
        "implementation_misalignment_prevention": {
          "rule": "all_qe_recommendations_must_align_with_implementation_reality",
          "validation": "cross_validation_with_implementation_reality_agent",
          "blocking_condition": "cannot_recommend_qe_tests_for_non_existent_implementation"
        },
        "version_context_ignorance_prevention": {
          "rule": "all_qe_analysis_must_include_version_context_and_feature_availability",
          "validation": "version_gap_analysis_and_feature_availability_verification",
          "blocking_condition": "cannot_analyze_qe_coverage_without_version_context"
        }
      },
      
      "expected_prevention_outcomes": {
        "evidence_based_qe_analysis": "qe_analysis_based_on_actual_test_file_evidence",
        "implementation_aligned_recommendations": "qe_recommendations_aligned_with_actual_capabilities",
        "version_aware_guidance": "qe_guidance_considers_version_gaps_and_feature_availability",
        "zero_fictional_coverage": "no_coverage_claims_without_implementation_evidence",
        "ultrathink_strategic_intelligence": "sophisticated_reasoning_provides_strategic_testing_pattern_intelligence"
      }
    }
  },
  
  "service_metrics": {
    "evidence_verification_rate": "100_percent_actual_test_file_verification",
    "implementation_alignment_rate": "100_percent_reality_consistency",
    "recommendation_actionability_rate": "100_percent_actionable_based_on_implementation",
    "framework_consistency_score": "100_percent_consistent_framework_state",
    "quality_confidence_level": "high_confidence_evidence_backed_analysis"
  },
  
  "execution_requirements": {
    "mandatory_prerequisites": [
      "implementation_reality_agent_completion",
      "pattern_extension_service_availability",
      "cross_agent_validation_engine_active"
    ],
    "coordination_checkpoints": [
      "reality_alignment_validation",
      "pattern_consistency_verification",
      "framework_state_consistency_check"
    ],
    "quality_gates": [
      "evidence_verification_gate",
      "implementation_alignment_gate",
      "framework_consistency_gate"
    ],
    "blocking_authority_triggers": [
      "insufficient_evidence",
      "implementation_contradiction",
      "feature_unavailability",
      "pattern_inconsistency"
    ]
  }
}