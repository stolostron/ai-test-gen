{
  "pattern_extension_service": {
    "service_name": "tg-pattern-extension-service",
    "authority_level": "COMPLETE_TEST_GENERATION_REPLACEMENT",
    "execution_phase": 4.0,
    "dependencies": [
      "tg-implementation-reality-agent",
      "tg-cross-agent-validation-engine"
    ],
    "integration_points": {
      "implementation_reality_agent": {
        "coordination_type": "evidence_validation",
        "data_exchange": [
          "pattern_source_verification",
          "element_existence_validation",
          "capability_confirmation"
        ],
        "blocking_coordination": true
      },
      "cross_agent_validation_engine": {
        "coordination_type": "quality_assurance",
        "data_exchange": [
          "pattern_consistency_validation",
          "evidence_cross_reference",
          "framework_state_alignment"
        ],
        "validation_gates": true
      }
    },
    "pattern_source_configuration": {
      "primary_sources": [
        "temp_repos/clc-ui-e2e/cypress/tests/automation/automation_upgrade.spec.js",
        "temp_repos/clc-ui-e2e/cypress/tests/automation/automation_action.spec.js"
      ],
      "secondary_sources": [
        "temp_repos/clc-ui-e2e/cypress/tests/clusters/managedClusters/*.spec.js",
        "temp_repos/clc-ui-e2e/cypress/tests/clusterset/*.spec.js"
      ],
      "pattern_types": {
        "cli_workflows": {
          "source_priority": "automation_upgrade.spec.js",
          "confidence_level": "HIGH",
          "extension_scope": ["upgrade", "cluster_management", "yaml_manipulation"]
        },
        "ui_automation": {
          "source_priority": "automation_action.spec.js",
          "confidence_level": "HIGH", 
          "extension_scope": ["template_management", "navigation", "form_interaction"]
        },
        "hybrid_patterns": {
          "source_priority": "both_primary_sources",
          "confidence_level": "HIGH",
          "extension_scope": ["complete_workflows", "validation_patterns"]
        }
      }
    },
    "validation_rules": {
      "mandatory_traceability": {
        "requirement": "Every test element must be traceable to existing successful pattern",
        "validation_method": "source_pattern_reference_check",
        "blocking_level": "CRITICAL"
      },
      "fictional_element_prevention": {
        "requirement": "Zero elements not found in existing successful tests",
        "validation_method": "element_existence_verification",
        "blocking_level": "CRITICAL"
      },
      "pattern_integrity": {
        "requirement": "Core workflow structure preserved from source patterns",
        "validation_method": "structural_compliance_check",
        "blocking_level": "HIGH"
      },
      "implementation_alignment": {
        "requirement": "All test actions proven implementable in existing tests",
        "validation_method": "capability_verification_check",
        "blocking_level": "CRITICAL"
      }
    },
    "blocking_conditions": {
      "no_suitable_pattern": {
        "condition": "Cannot find existing successful pattern for target scenario",
        "action": "HALT_TEST_GENERATION",
        "resolution_required": "Identify suitable pattern or declare generation impossible"
      },
      "fictional_elements_detected": {
        "condition": "Test generation includes unverified elements",
        "action": "HALT_AND_REMOVE_FICTIONAL_ELEMENTS", 
        "resolution_required": "Replace with proven elements or eliminate"
      },
      "implementation_contradiction": {
        "condition": "Pattern extension contradicts Implementation Reality findings",
        "action": "HALT_AND_RECONCILE",
        "resolution_required": "Align with actual codebase capabilities"
      },
      "pattern_integrity_violation": {
        "condition": "Extension significantly alters successful source structure",
        "action": "HALT_AND_PRESERVE_INTEGRITY",
        "resolution_required": "Maintain core structure while adapting context"
      }
    },
    "quality_metrics": {
      "pattern_traceability_rate": {
        "target": "100%",
        "measurement": "Percentage of test elements with valid source pattern references"
      },
      "fictional_element_rate": {
        "target": "0%", 
        "measurement": "Percentage of test elements not found in existing successful tests"
      },
      "success_prediction_confidence": {
        "target": ">90%",
        "measurement": "Confidence in test success based on source pattern reliability"
      },
      "implementation_alignment_rate": {
        "target": "100%",
        "measurement": "Percentage of test actions proven implementable"
      }
    }
  },
  "framework_integration": {
    "execution_order": [
      "tg-jira-fixversion-validation-service",
      "tg-implementation-reality-agent", 
      "other_investigation_agents",
      "tg-cross-agent-validation-engine",
      "tg-pattern-extension-service"
    ],
    "validation_checkpoints": [
      {
        "phase": "pre_pattern_extension",
        "validations": [
          "implementation_reality_completion",
          "cross_agent_consistency_validation",
          "evidence_quality_verification"
        ]
      },
      {
        "phase": "during_pattern_extension", 
        "validations": [
          "real_time_pattern_validation",
          "element_existence_checking",
          "structural_integrity_monitoring"
        ]
      },
      {
        "phase": "post_pattern_extension",
        "validations": [
          "final_traceability_verification",
          "quality_metrics_compliance",
          "framework_consistency_check"
        ]
      }
    ],
    "error_handling": {
      "pattern_source_failure": {
        "escalation": "tg-implementation-reality-agent",
        "fallback": "alternative_pattern_search",
        "ultimate_action": "declare_test_generation_impossible"
      },
      "validation_failure": {
        "escalation": "tg-cross-agent-validation-engine",
        "fallback": "pattern_refinement",
        "ultimate_action": "halt_framework_execution"
      }
    }
  },
  "acm_22079_specific_configuration": {
    "target_scenario": "cluster_update_digest_testing",
    "primary_pattern_source": "automation_upgrade.spec.js",
    "pattern_extension_strategy": {
      "source_workflow": "lines_75_94_upgrade_workflow",
      "adaptation_approach": "digest_based_upgrade_extension",
      "preservation_requirements": [
        "cli_workflow_structure",
        "yaml_manipulation_pattern", 
        "validation_approach",
        "timing_patterns"
      ]
    },
    "validation_focus": {
      "pattern_traceability": "Every element traceable to automation_upgrade.spec.js",
      "implementation_capability": "All actions proven in existing CLI tests",
      "fictional_prevention": "Zero UI elements without existing UI pattern evidence",
      "success_prediction": "HIGH confidence based on source pattern success rate"
    }
  }
}